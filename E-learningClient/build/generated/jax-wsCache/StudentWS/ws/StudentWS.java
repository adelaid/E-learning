
package ws;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "StudentWS", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface StudentWS {


    /**
     * 
     * @param studentId
     * @param courseId
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "registerToCourse", targetNamespace = "http://ws/", className = "ws.RegisterToCourse")
    @Action(input = "http://ws/StudentWS/registerToCourse")
    public void registerToCourse(
        @WebParam(name = "courseId", targetNamespace = "")
        Long courseId,
        @WebParam(name = "studentId", targetNamespace = "")
        Long studentId);

    /**
     * 
     * @param username
     * @return
     *     returns ws.Student
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getStudent", targetNamespace = "http://ws/", className = "ws.GetStudent")
    @ResponseWrapper(localName = "getStudentResponse", targetNamespace = "http://ws/", className = "ws.GetStudentResponse")
    @Action(input = "http://ws/StudentWS/getStudentRequest", output = "http://ws/StudentWS/getStudentResponse")
    public Student getStudent(
        @WebParam(name = "username", targetNamespace = "")
        String username);

    /**
     * 
     * @param firstName
     * @param lastName
     * @param password
     * @param city
     * @param streetNo
     * @param street
     * @param email
     * @param username
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "addStudent", targetNamespace = "http://ws/", className = "ws.AddStudent")
    @Action(input = "http://ws/StudentWS/addStudent")
    public void addStudent(
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "city", targetNamespace = "")
        String city,
        @WebParam(name = "street", targetNamespace = "")
        String street,
        @WebParam(name = "streetNo", targetNamespace = "")
        String streetNo);

    /**
     * 
     * @return
     *     returns java.util.List<ws.Student>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllStudents", targetNamespace = "http://ws/", className = "ws.GetAllStudents")
    @ResponseWrapper(localName = "getAllStudentsResponse", targetNamespace = "http://ws/", className = "ws.GetAllStudentsResponse")
    @Action(input = "http://ws/StudentWS/getAllStudentsRequest", output = "http://ws/StudentWS/getAllStudentsResponse")
    public List<Student> getAllStudents();

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "userExists", targetNamespace = "http://ws/", className = "ws.UserExists")
    @ResponseWrapper(localName = "userExistsResponse", targetNamespace = "http://ws/", className = "ws.UserExistsResponse")
    @Action(input = "http://ws/StudentWS/userExistsRequest", output = "http://ws/StudentWS/userExistsResponse")
    public boolean userExists(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password);

    /**
     * 
     * @param studentId
     * @param courseId
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "confirmRegisterToCourse", targetNamespace = "http://ws/", className = "ws.ConfirmRegisterToCourse")
    @Action(input = "http://ws/StudentWS/confirmRegisterToCourse")
    public void confirmRegisterToCourse(
        @WebParam(name = "studentId", targetNamespace = "")
        Long studentId,
        @WebParam(name = "courseId", targetNamespace = "")
        Long courseId);

    /**
     * 
     * @param studentId
     * @return
     *     returns java.util.List<ws.StudentCourse>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCourseByStudent", targetNamespace = "http://ws/", className = "ws.GetCourseByStudent")
    @ResponseWrapper(localName = "getCourseByStudentResponse", targetNamespace = "http://ws/", className = "ws.GetCourseByStudentResponse")
    @Action(input = "http://ws/StudentWS/getCourseByStudentRequest", output = "http://ws/StudentWS/getCourseByStudentResponse")
    public List<StudentCourse> getCourseByStudent(
        @WebParam(name = "studentId", targetNamespace = "")
        Long studentId);

    /**
     * 
     * @return
     *     returns java.util.List<ws.StudentCourse>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllStudentCourse", targetNamespace = "http://ws/", className = "ws.GetAllStudentCourse")
    @ResponseWrapper(localName = "getAllStudentCourseResponse", targetNamespace = "http://ws/", className = "ws.GetAllStudentCourseResponse")
    @Action(input = "http://ws/StudentWS/getAllStudentCourseRequest", output = "http://ws/StudentWS/getAllStudentCourseResponse")
    public List<StudentCourse> getAllStudentCourse();

}
